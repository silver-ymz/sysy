use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {},
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

Decl: Decl = {
  ConstDecl => Decl::Const(<>),
  VarDecl => Decl::Var(<>),
};

ConstDecl: ConstDecl = "const" <btype: BType> <def: ConstDef> <mut defs: ("," <ConstDef>)*> ";" =>
  ConstDecl { btype, defs: { defs.insert(0, def); defs } };

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: Ident> "=" <val: ConstExp> => ConstDef { <> };

ConstExp: ConstExp = Exp;

VarDecl: VarDecl = <btype: BType> <def: VarDef> <mut defs: ("," <VarDef>)*> ";" =>
  VarDecl { btype, defs: { defs.insert(0, def); defs } };

VarDef: VarDef = <ident: Ident> <val: ("=" <Exp>)?> => VarDef { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <Decl> => BlockItem::Decl(<>),
  <Stmt> => BlockItem::Stmt(<>),
};

Stmt: Stmt = {
  OpenStmt,
  ClosedStmt,
}

OpenStmt: Stmt = {
  "if" "(" <cond: Exp> ")" <then: Stmt> => Stmt::IfElse { cond, then: Box::new(then), else_: None },
  "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <else_: OpenStmt> => Stmt::IfElse { cond, then: Box::new(then), else_: Some(Box::new(else_)) },
  "while" "(" <cond: Exp> ")" <body: OpenStmt> => Stmt::While { cond, body: Box::new(body) },
};

ClosedStmt: Stmt = {
  SimpleStmt,
  "if" "(" <cond: Exp> ")" <then: ClosedStmt> "else" <else_: ClosedStmt> => Stmt::IfElse { cond, then: Box::new(then), else_: Some(Box::new(else_)) },
  "while" "(" <cond: Exp> ")" <body: ClosedStmt> => Stmt::While { cond, body: Box::new(body) },
}

SimpleStmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign { <> },
  <Exp?> ";" => Stmt::Exp(<>),
  <Block> => Stmt::Block(<>),
  "return" <Exp?> ";" => Stmt::Ret(<>),
  "break" ";" => Stmt::Break,
  "continue" ";" => Stmt::Continue,
};

Exp: Exp = <exp: BinaryExp> => Exp { <> };

LVal: LVal = <ident: Ident> => LVal { <> };

BinaryExp: BinaryExp = {
  #[precedence(level="0")]
  UnaryExp => BinaryExp::Single(<>),
  #[precedence(level="1")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: MulOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
  #[precedence(level="2")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: AddOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
  #[precedence(level="3")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: RelOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
  #[precedence(level="4")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: EqOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
  #[precedence(level="5")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: LAndOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
  #[precedence(level="6")] #[assoc(side="left")]
  <lhs: BinaryExp> <op: LOrOp> <rhs: BinaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)}
}

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary {op, exp: Box::new(exp)},
};

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  <Number> => PrimaryExp::Num(<>),
  <LVal> => PrimaryExp::LVal(<>),
};

Number: Number = IntConst;

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Ne,
};

LAndOp: BinaryOp = "&&" => BinaryOp::LAnd;

LOrOp: BinaryOp = "||" => BinaryOp::LOr;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => <>.parse::<i32>().unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};
