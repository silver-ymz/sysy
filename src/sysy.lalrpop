use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {},
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

Decl: Decl = {
  ConstDecl => Decl::Const(<>),
  VarDecl => Decl::Var(<>),
};

ConstDecl: ConstDecl = "const" <btype: BType> <def: ConstDef> <mut defs: ("," <ConstDef>)*> ";" =>
  ConstDecl { btype, defs: { defs.insert(0, def); defs } };

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: Ident> "=" <val: ConstExp> => ConstDef { <> };

ConstExp: ConstExp = Exp;

VarDecl: VarDecl = <btype: BType> <def: VarDef> <mut defs: ("," <VarDef>)*> ";" =>
  VarDecl { btype, defs: { defs.insert(0, def); defs } };

VarDef: VarDef = <ident: Ident> <val: ("=" <Exp>)?> => VarDef { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <Decl> => BlockItem::Decl(<>),
  <Stmt> => BlockItem::Stmt(<>),
};

Stmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign { <> },
  <Exp?> ";" => Stmt::Exp(<>),
  <Block> => Stmt::Block(<>),
  "return" <Exp?> ";" => Stmt::Ret(<>),
};

Exp: Exp = <exp: LOrExp> => Exp { <> };

LVal: LVal = <ident: Ident> => LVal { <> };

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  <Number> => PrimaryExp::Num(<>),
  <LVal> => PrimaryExp::LVal(<>),
};

Number: Number = IntConst;

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary {op, exp: Box::new(exp)},
};

MulExp: BinaryExp = {
  UnaryExp => BinaryExp::Single(<>),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(BinaryExp::Single(rhs))},
};

AddExp: BinaryExp = {
  MulExp,
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
};

RelExp: BinaryExp = {
  AddExp,
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
};

EqExp: BinaryExp = {
  RelExp,
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
};

LAndExp: BinaryExp = {
  EqExp,
  <lhs: LAndExp> <op: LAndOp> <rhs: EqExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
};

LOrExp: BinaryExp = {
  LAndExp,
  <lhs: LOrExp> <op: LOrOp> <rhs: LAndExp> => BinaryExp::Multi {op, lhs: Box::new(lhs), rhs: Box::new(rhs)},
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Ne,
};

LAndOp: BinaryOp = "&&" => BinaryOp::LAnd;

LOrOp: BinaryOp = "||" => BinaryOp::LOr;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};
